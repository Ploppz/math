use std::str::FromStr;
use expr::*;
use self::Expr::*;

grammar;

pub Expr: Expr = {
    <l:Expr> "+" <r:Factor> => Add(box (l, r)),
    <l:Expr> "-" <r:Factor> => Sub(box (l, r)),
    Factor,
};

pub Factor: Expr = {
    <l:Num> <r:Pow> => Mul(box(l, r)),
    <l:Factor> "*" <r:Pow> => Mul(box(l, r)),
    <l:Factor> "/" <r:Pow> => Div(box(l, r)),
    Pow,
};

pub Pow: Expr = {
    <b:Term> "^" <e:Term> => Pow(box(b, e)),
    <f:r"[[:alpha:]]+"> "(" <g:Expr> ")" => Func(f.into(), box g),
    Term,
};

pub Term: Expr = {
    Num,
    Var,
    "(" <Expr> ")",
};

Num: Expr = <s:r"[0-9]+"> => Int(s.parse::<i32>().unwrap());
Var: Expr = <s:r"[[:alpha:]]+"> => Var(s.into());
