use builder::{Builder, NodeResult, Op};

grammar<'b>(builder: &'b Builder);

pub Expr: NodeResult<'input> = {
    <l:Expr> "+" <r:Factor> => Ok(builder.add(l?, r?)),
    <l:Expr> "-" <r:Factor> => Ok(builder.sub(l?, r?)),
    "-" <f:Factor> => Ok(builder.neg(f?)),
    Factor,
};

pub Factor: NodeResult<'input> = {
    <l:Factor> "*" <r:Pow> => Ok(builder.mul(l?, r?)),
    <l:Factor> "Â·" <r:Pow> => Ok(builder.mul(l?, r?)),
    <l:Factor> "/" <r:Pow> => builder.div(l?, r?),
    <l:Factor> <r:Pow> => Ok(builder.mul(l?, r?)),
    Pow,
};

pub Op: Op<'input> = {
    <v:r"d/d\pL+"> => Op::Diff(&v[3..]),
};

pub Pow: NodeResult<'input> = {
    <b:Func> "^" <e:Pow> => builder.pow(b?, e?),
    <o:Op> <f:Pow> => builder.op(o, f?),
    <o:Op> "^" <n:r"[0-9]+"> <f:Pow> => builder.op_n(o, n.parse().unwrap(), f?),
    Func,
};

pub Func: NodeResult<'input> = {
    <f:r"\pL+\("> <g:Expr> ")" => builder.function(&f[..f.len()-1], g?),
    Term,
};

pub Term: NodeResult<'input> = {
    Num,
    Var,
    "(" <Expr> ")",
};

Num: NodeResult<'input> = <s:r"[0-9]+"> => builder.decimal(s);
Var: NodeResult<'input> = <s:r"\pL+"> => Ok(builder.var(s));
